name: Destroy pull request environment - GameGatherUI

on:
  pull_request:
    types: [closed]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write
  actions: read


jobs:
  destroy:
    defaults:
      run:
        working-directory: ./terraform/pr_environments
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Format
        id: fmt
        run: terraform fmt 
        
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo "##[group]Terraform Init"
          echo "Initializing Terraform..."
          
          terraform init -input=false \
            -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.AZURE_KEY }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Destroy
        id: destroy
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform destroy -auto-approve

  terraform_prod:
    if: github.event.pull_request.merged == true
    needs: destroy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      webapp_name: ${{ steps.terraform_output.outputs.webapp_name }}
      resource_group_name: ${{ steps.terraform_output.outputs.resource_group_name }}
      static_webapp_name: ${{ steps.terraform_output.outputs.static_webapp_name }}
      static_webapp_url: ${{ steps.terraform_output.outputs.static_webapp_url }}
      # Dodajemy URL API jako output - jest to URL backendu produkcyjnego
      api_url: ${{ steps.terraform_output.outputs.webapp_publish_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Format
        id: fmt
        run: terraform fmt 
        
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          echo "##[group]Terraform Init"
          echo "Initializing Terraform..."
          
          terraform init -input=false \
            -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME_PROD }}" \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME_PROD }}" \
            -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME_PROD }}" \
            -backend-config="key=${{ secrets.AZURE_KEY_PROD }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform plan -no-color -input=false

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color -input=false 
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_AZUREAD: true    

      - name: Terraform Output
        id: terraform_output
        run: |
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo $(terraform output -raw resource_group_name)
          echo "static_webapp_name=$(terraform output -raw static_webapp_name)" >> $GITHUB_OUTPUT
          echo "static_webapp_url=$(terraform output -raw static_webapp_url)" >> $GITHUB_OUTPUT
          echo "webapp_name=$(terraform output -raw webapp_name)" >> $GITHUB_OUTPUT
          echo "webapp_publish_url=$(terraform output -raw webapp_publish_url)" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # Nowy job do budowania aplikacji Angular z produkcyjnym URL backendu
  build-angular-prod:
    if: github.event.pull_request.merged == true
    needs: [terraform_prod]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Konfiguracja Node.js dla Angulara
      - name: Konfiguracja Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Tworzenie plik√≥w ≈õrodowiskowych z produkcyjnym adresem API
      - name: Tworzenie plik√≥w ≈õrodowiskowych produkcyjnych
        run: |
          mkdir -p src/environments
          
          # Tworzenie environment.ts (produkcyjny)
          echo "export const environment = {" > src/environments/environment.ts
          echo "  production: true," >> src/environments/environment.ts
          echo "  apiUrl: '${{ needs.terraform_prod.outputs.api_url }}'," >> src/environments/environment.ts
          echo "};" >> src/environments/environment.ts
          
          # Wy≈õwietlenie utworzonych plik√≥w
          echo "Utworzone pliki ≈õrodowiskowe produkcyjne:"
          echo "API URL: ${{ needs.terraform_prod.outputs.api_url }}"
          cat src/environments/environment.ts
      
      # Instalacja zale≈ºno≈õci
      - name: Instalacja zale≈ºno≈õci
        run: npm ci
      
      # Budowanie aplikacji Angular dla produkcji
      - name: Budowanie aplikacji Angular dla produkcji
        run: npm run build --configuration=production
      
      # Przesy≈Çanie artefaktu budowania Angular
      - name: Przesy≈Çanie artefaktu Angular
        uses: actions/upload-artifact@v4
        with:
          name: angular-app-prod
          path: ./dist/

  deploy:
    if: github.event.pull_request.merged == true
    needs: [terraform_prod, build-angular-prod]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Login to Azure
        run: |
          echo "Logging in to Azure..."
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }} --output none

      # Pobieramy nasz nowo zbudowany artefakt zamiast artefaktu z poprzedniego workflow
      - name: Download Angular production artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-app-prod
          path: ./app-artifacts

      # Wdra≈ºanie UI
      - name: Deploy UI to Static Web App
        run: |
          # Wdra≈ºanie za pomocƒÖ az CLI
          az staticwebapp deploy \
            --source ./app-artifacts \
            --app-name ${{ needs.terraform_prod.outputs.static_webapp_name }} \
            --resource-group ${{ needs.terraform_prod.outputs.resource_group_name }} \
            --no-wait

      - name: Add deployment comment to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const prNumber = context.payload.pull_request?.number;
            if (!prNumber) return;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `#### üöÄ Produkcyjne wdro≈ºenie UI zako≈Ñczone sukcesem!
              
              Frontend zosta≈Ç pomy≈õlnie wdro≈ºony do ≈õrodowiska produkcyjnego.
              
              ### üåê URL produkcyjny
              
              **Frontend URL**: [https://${{ needs.terraform_prod.outputs.static_webapp_url }}](https://${{ needs.terraform_prod.outputs.static_webapp_url }})
              **API URL**: [${{ needs.terraform_prod.outputs.api_url }}](${{ needs.terraform_prod.outputs.api_url }}/swagger/index.html)
              
              *Wdro≈ºone przez: @${context.actor} po zmergeowaniu PR #${prNumber}*`
            });

      - name: Logout from Azure
        run: |
          az logout