name: Create pull request environment - GameGatherUI

on:
  pull_request:
    types: [reopened, opened, synchronize, edited]
  workflow_dispatch:

permissions:
  contents: read      # Zmniejszone z write, bo nie tworzymy już releasów
  id-token: write      # Potrzebne do OIDC z Azure
  pull-requests: write # Potrzebne do komentowania PRów

jobs:
  
  terraform:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    defaults:
      run:
        working-directory: ./terraform/pr_environments
    runs-on: ubuntu-latest
    outputs:
      webapp_name: ${{ steps.terraform_output.outputs.webapp_name }}
      resource_group_name: ${{ steps.terraform_output.outputs.resource_group_name }}
      webapp_url: ${{ steps.terraform_output.outputs.webapp_publish_url }}
      static_webapp_name: ${{ steps.terraform_output.outputs.static_webapp_name }}
      static_webapp_url: ${{ steps.terraform_output.outputs.static_webapp_url }}
      static_webapp_token: ${{ steps.terraform_output.outputs.static_webapp_token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Format
        id: fmt
        run: terraform fmt 
        
      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.AZURE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.AZURE_KEY }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ github.token }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
          
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -no-color -input=false 
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_AZUREAD: true
          
      - name: Terraform Output
        id: terraform_output
        run: |
          echo "webapp_name=$(terraform output -raw webapp_name)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "webapp_publish_url=$(terraform output -raw webapp_publish_url)" >> $GITHUB_OUTPUT
          echo "static_webapp_name=$(terraform output -raw static_webapp_name)" >> $GITHUB_OUTPUT
          echo "static_webapp_url=$(terraform output -raw static_webapp_url)" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  download-backend-artifact:
    runs-on: ubuntu-latest
    #needs: [terraform]
    steps:
      - name: Get latest backend release
        id: get-latest-release
        uses: actions/github-script@v7
        with:
          # Zmieniona nazwa tokenu z GITHUB_PAT na TOKEN_PAT
          github-token: ${{ secrets.TOKEN_PAT }}
          script: |
            try {
              // Pobierz listę releasów z repozytorium backendu
              console.log("Fetching releases from tempGameGather repository...");
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: 'tempGameGather',
                per_page: 10
              });
              
              if (releases.data.length === 0) {
                console.log("No releases found in backend repository!");
                return { found: false };
              }
              
              // Znajdź najnowszy release (pierwszy na liście)
              const latestRelease = releases.data[0];
              console.log(`Found latest release: ${latestRelease.name}, tag: ${latestRelease.tag_name}`);
              
              // Znajdź asset z plikiem zip
              const zipAsset = latestRelease.assets.find(asset => 
                asset.name.endsWith('.zip') || asset.name === 'gamegather-app.zip'
              );
              
              if (!zipAsset) {
                console.log("No zip asset found in the latest release!");
                return { found: false };
              }
              
              console.log(`Found zip asset: ${zipAsset.name}, download URL: ${zipAsset.browser_download_url}`);
              
              return { 
                found: true, 
                url: zipAsset.browser_download_url,
                release_name: latestRelease.name,
                tag_name: latestRelease.tag_name
              };
            } catch (error) {
              console.error(`Error fetching releases: ${error.message}`);
              return { found: false };
            }
      
      - name: Download backend artifact
        if: fromJSON(steps.get-latest-release.outputs.result).found
        run: |
          mkdir -p ./backend
          DOWNLOAD_URL=$(echo '${{ steps.get-latest-release.outputs.result }}' | jq -r '.url')
          RELEASE_NAME=$(echo '${{ steps.get-latest-release.outputs.result }}' | jq -r '.release_name')
          TAG_NAME=$(echo '${{ steps.get-latest-release.outputs.result }}' | jq -r '.tag_name')
          
          echo "Downloading backend artifact from: $DOWNLOAD_URL"
          echo "Release: $RELEASE_NAME (Tag: $TAG_NAME)"
          
          # Pobierz plik ZIP z release
          curl -L -o ./backend/backend.zip "$DOWNLOAD_URL"
          
          # Sprawdź, czy pobrano poprawnie
          if [ -f ./backend/backend.zip ]; then
            echo "Successfully downloaded backend artifact"
            echo "BACKEND_RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV 
            echo "BACKEND_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          else
            echo "Failed to download backend artifact"
            exit 1
          fi
      
      - name: Upload backend artifact for deployment
        if: fromJSON(steps.get-latest-release.outputs.result).found
        uses: actions/upload-artifact@v4
        with:
          name: backend-zip
          path: ./backend/backend.zip

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [download-backend-artifact]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }} --output none
      
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-zip
          path: ./backend
      
      # Dodany krok rozpakowania artefaktu ZIP
      - name: Rozpakuj backend artifact
        run: |
          ls -la

          # Utwórz folder docelowy
          mkdir -p ./backend/extracted
          
          # Rozpakuj archiwum ZIP
          unzip -o ./backend/backend.zip -d ./backend/extracted
          
          # Wyświetl zawartość rozpakowanego folderu
          echo "Zawartość rozpakowanego folderu backendu:"
          ls -la ./backend/extracted
          
          # Sprawdź czy główne pliki są dostępne
          if [ -f ./backend/extracted/web.config ] || [ -f ./backend/extracted/GameGather.dll ]; then
            echo "Artefakt backendu został poprawnie rozpakowany"
          else
            echo "Uwaga: Nie znaleziono oczekiwanych plików w rozpakowanym artefakcie backendu"
            # Wypisz pełną strukturę plików, aby pomóc w debugowaniu
            find ./backend/extracted -type f | sort
          fi
      
      - name: Wdróż backend na Azure Web App
        id: deploy-backend
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ needs.terraform.outputs.webapp_name }}
          resource-group-name: ${{ needs.terraform.outputs.resource_group_name }}
          # Zmieniona ścieżka na rozpakowany folder z artefaktem
          package: ./backend/extracted

  build-angular:
    runs-on: ubuntu-latest
    needs: [deploy-backend, terraform]
    steps:
      - uses: actions/checkout@v4
      
      # Konfiguracja Node.js dla Angulara
      - name: Konfiguracja Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Tworzenie plików środowiskowych z dynamicznym adresem API
      - name: Tworzenie plików środowiskowych
        run: |
          mkdir -p src/environments
          
          # Tworzenie environment.ts (produkcyjny)
          echo "export const environment = {" > src/environments/environment.ts
          echo "  production: true," >> src/environments/environment.ts
          echo "  apiUrl: '${{ needs.terraform.outputs.webapp_url }}'," >> src/environments/environment.ts
          echo "};" >> src/environments/environment.ts
          
          # Wyświetlenie utworzonych plików
          echo "Utworzone pliki środowiskowe:"
          cat src/environments/environment.ts
      
      # Instalacja zależności
      - name: Instalacja zależności
        run: npm ci
      
      # Budowanie aplikacji Angular
      - name: Budowanie aplikacji Angular
        run: npm run build --configuration=production
      
      # Przesyłanie artefaktu budowania Angular
      - name: Przesyłanie artefaktu Angular
        uses: actions/upload-artifact@v4
        with:
          name: angular-app
          path: ./dist/

  deploy-angular:
    runs-on: ubuntu-latest
    needs: [build-angular, terraform]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:        
      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }} --output none   
      
      - name: Download Angular artifact
        uses: actions/download-artifact@v4
        with:
          name: angular-app
          path: ./app-artifacts

      # Wdrażanie UI za pomocą az CLI zamiast akcji Azure/static-web-apps-deploy
      - name: Deploy UI to Static Web App
        run: |
          # Wdrażanie za pomocą az CLI
          az staticwebapp deploy \
            --source ./app-artifacts \
            --app-name ${{ needs.terraform.outputs.static_webapp_name }} \
            --resource-group ${{ needs.terraform.outputs.resource_group_name }} \
            --no-wait
      
      - name: Add deployment comment to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ github.token }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            
            const deployComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('🚀 UI Deployment Status')
            })
            
            // Preferuj URL ze Static Web App, jeśli jest dostępne
            const staticWebAppUrl = "https://${{ needs.terraform.outputs.static_webapp_url }}";
            const apiUrl = '${{ needs.terraform.outputs.webapp_url }}/swagger/index.html';
            const backendRelease = '${{ env.BACKEND_RELEASE_NAME }}';
            const backendTag = '${{ env.BACKEND_TAG_NAME }}';
            
            const output = `#### 🚀 UI Deployment Status: \`Success\`
            
            Środowisko dla PR zostało pomyślnie wdrożone!
            
            ### 🌐 URL-e środowiska
            
            **Frontend URL**: [Kliknij tutaj, aby przejść do UI](${staticWebAppUrl})
            **API URL**: [Dokumentacja API](${apiUrl})
            
            ### 📦 Informacje o wersji
            
            **Backend**: ${backendRelease} (tag: ${backendTag})
            
            *Wdrożone przez: @${{ github.actor }}, PR: #${{ github.event.pull_request.number }}*`;
            
            if (deployComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: deployComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Logout from Azure
        run: |
          az logout
